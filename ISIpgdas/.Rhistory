install.packages("alr4")
#%%
# Install and load required packages
if (!require("lmreg")) install.packages("lmreg", repos = "http://cran.us.r-project.org")
if (!require("boot")) install.packages("boot", repos = "http://cran.us.r-project.org")
library(lmreg)
library(boot)
# Load the dataset
data("imf2015", package = "lmreg")
# Fit the regression model
model <- lm(UNMP ~ EXP + INFL + INV, data = imf2015)
# Define new observation
new_data <- data.frame(EXP = 42, INFL = 0.12, INV = 22)
# Define bootstrapping function
boot_pred <- function(data, indices) {
d <- data[indices, ]  # Resample data
fit <- lm(UNMP ~ EXP + INFL + INV, data = d)  # Refit model
predict(fit, newdata = new_data)  # Predict value
}
# Perform parametric bootstrap with 1000 replicates
set.seed(123)  # Set seed for reproducibility
boot_results <- boot(imf2015, boot_pred, R = 1000)
# Extract 95% lower confidence bound
lower_ci <- quantile(boot_results$t, probs = 0.025)
# Round to the nearest whole number
rounded_lower_ci <- round(lower_ci)
# Print the result
cat("The 95% lower confidence limit for UNMP is:", rounded_lower_ci, "\n")
write.csv(imf2015, file = "/Users/ajk/Library/CloudStorage/OneDrive-Personal/ajkTech/CODE-LAB-REPO/WsPy1/ISIpgdas/data/imf2015_export.csv", row.names = FALSE)
write.csv(imf2015, file = "/Users/ajk/Library/CloudStorage/OneDrive-Personal/ajkTech/CODE-LAB-REPO/WsPy1/ISIpgdas/data/imf2015_export.csv", row.names = TRUE)
write.csv(imf2015, file = "/Users/ajk/Library/CloudStorage/OneDrive-Personal/ajkTech/CODE-LAB-REPO/WsPy1/ISIpgdas/data/imf2015_export.csv", row.names = TRUE)
write.csv(imf2015, file = mf2015_export.csv", row.names = TRUE)
write.csv(imf2015, file = "mf2015_export.csv", row.names = TRUE)
# Load necessary package
if (!require("lmreg")) install.packages("lmreg", repos = "http://cran.us.r-project.org")
library(lmreg)
# Load the dataset
data("imf2015", package = "lmreg")
# Export dataset to CSV
write.csv(imf2015, file = "imf2015_export.csv", row.names = FALSE)
# Confirm the file has been saved
cat("The dataset has been successfully exported as 'imf2015_export.csv'.\n")
# Export dataset to CSV
write.csv(imf2015, file = "imf2015_export.csv", row.names = TRUE)
imf2015
getwd()
setwd("/Users/ajk/Library/CloudStorage/OneDrive-Personal/ajkTech/CODE-LAB-REPO/WsPy1/ISIpgdas")
getwd()
# Export dataset to CSV
write.csv(imf2015, file = "/data/imf2015_export.csv", row.names = TRUE)
# Export dataset to CSV
write.csv(imf2015, file = "../ISIpgdas/data/imf2015_export.csv", row.names = TRUE)
# Export dataset to CSV
write.csv(imf2015, file = "../../data/imf2015_export.csv", row.names = TRUE)
# Export dataset to CSV
write.csv(imf2015, file = "imf2015_export.csv", row.names = TRUE)
getwd()
imf2015
# Export dataset to CSV
write.csv(imf2015, file = "imf2015_export.csv", row.names = TRUE)
# Export dataset to CSV
write.csv(imf2015, file = "/Users/ajk/Library/CloudStorage/OneDrive-Personal/ajkTech/CODE-LAB-REPO/WsPy1/ISIpgdas/data/imf2015_export.csv", row.names = TRUE)
# Export dataset to CSV
write.csv(imf2015, file = "/Users/ajk/Library/CloudStorage/OneDrive-Personal/ajkTech/CODE-LAB-REPO/WsPy1/ISIpgdas/data/imf2015_export.csv", row.names = TRUE)
# Export dataset to CSV
write.csv(imf2015, file = "/Users/ajk/Downloads/imf2015_export.csv", row.names = TRUE)
# Confirm the file has been saved
data("MinnWater", package = "alr4")
write.csv(imf2015, file = "/Users/ajk/Downloads/MinnWater.csv", row.names = TRUE)
write.csv(MinnWater), file = "/Users/ajk/Downloads/MinnWater.csv", row.names = TRUE)
write.csv(MinnWater, file = "/Users/ajk/Downloads/MinnWater.csv", row.names = TRUE)
